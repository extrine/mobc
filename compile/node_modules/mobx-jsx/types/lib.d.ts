import { $mobx, IObservableArray } from "mobx";
export interface Context {
    id: symbol;
    Provider: (props: any) => any;
    defaultValue: unknown;
}
export declare class Component<T extends {
    children?: any;
}> {
    isClassComponent?: boolean;
    props: T;
    constructor(props: T);
    render(props: T): any;
}
export declare function root<T>(fn: (dispose: () => void) => T): T;
export declare function cleanup(fn: () => void): void;
export declare function effect<T>(fn: (prev?: T) => T, current?: T): void;
export declare function memo<T>(fn: () => T, equal?: boolean): () => T;
declare type PropsWithChildren<P> = P & {
    children?: JSX.Element;
};
export declare type FunctionComponent<P = {}> = (props: PropsWithChildren<P>) => JSX.Element;
declare type PossiblyWrapped<T> = {
    [P in keyof T]: T[P] | (() => T[P]);
};
export declare function createComponent<T>(Comp: Component<T> & FunctionComponent<T>, props: PossiblyWrapped<T>, dynamicKeys?: (keyof T)[]): JSX.Element;
export declare function lazy<T extends Function>(fn: () => Promise<{
    default: T;
}>): (props: object) => () => any;
export declare function createContext(defaultValue?: unknown): Context;
export declare function useContext(context: Context): any;
export declare function map<T, U>(list: IObservableArray<T> & {
    [$mobx]: any;
}, mapFn: (v: T, i: number) => U | any): () => U[];
export {};
